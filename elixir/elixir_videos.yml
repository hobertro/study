---
- front: 'How do you register a process PID with a name?'
  back: 'Use Process.register(pid, :name_of_server)'
  tags: []
- front: 'What good is using a name for a server instead of its PID?'
  back: 'Instead of needing the PID, you can send to the server with that name'
  tags: []
- front: 'What is the downside of the using a name of the server vs the pid?'
  back: 'If you forgot that you have changed the name of the process, you might forget all the places the name is used'
  tags: []
- front: 'How do you get a the messages of a process?'
  back: 'Process.info(self(), :messages)'
  tags: []
- front: 'How does a process know to repeatedly call a function?'
  back: 'Schedule a refresh function to schedule another message to the server/process'
  tags: []
- front: 'What does Genserver init do?'
  back: 'Function that is invoked when the server is started. start_link/3 or start/3 will block until it returns. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop.'
  tags: []
- front: 'What is supervisor?'
  back: 'A supervisor is a process which supervises other processes, which we refer to as child processes.'
  tags: []
- front: 'What does the start_link method do?'
  back: 'Starts a supervisor with the given children. The children is a list of modules, two-element tuples with module and arguments or a map with the child specification.'
  tags: []
- front: 'What are your supervisors used to build?'
  back: 'A hierarchical process structure called a supervision tree.'
  tags: []
- front: 'What is the main advantage of using a supervision tree?'
  back: 'Supervision tress provide fault-tolerance and encapsulate how our applications start and shutdown.'
  tags: []
- front: 'What does the child spec function on the GenServer do?'
  back: 'Returns a child spec which is an elixir map specifying how the supervisor should start and supervise the child process.'
  tags: []
- front: 'What is Elixir Registry module?'
  back: 'A local, decentralized and scalable key-value process storage.'
  tags: []
- front: 'What does the Elixir Registry module do?'
  back: 'It allows developers to look up one or more processes with a given key.'
  tags: []
- front: 'What does GenServer.whereis() do?'
  back: 'Returns the PID of a process if given a via tuple'
  tags: []
- front: 'What are the three attributes of Elixir Processes? (3)'
  back: 'They are isolated from each other, run concurrent to one another, and communicate via message passing.'
  tags: []
- front: 'What does the spawn function do?'
  back: 'Returns a PID and will execute the given function and exit after the function is done'
  tags: []
- front: 'What does the Process.self() method do?'
  back: 'Returns its PID'
  tags: []
- front: 'What does the the send() method do?'
  back: 'Send messages to processes'
  tags: []
- front: 'What does the receive() method do?'
  back: 'The receive block takes a message that is sent to the process and searches for a message that matches any of the given patterns.'
  tags: []
- front: 'What does the inspect method do?'
  back: 'Covert's a data structure's internal representation into a string.'
  tags: []
- front: 'How do processes maintain state?'
  back: 'We can write a process that loops infinitely, maintain state, and send and receive messages.'
  tags: []
- front: 'What are Agents?'
  back: 'They are simple wrappers around state.'
  tags: []
- front: 'For GenServer messages, what are the two types of messages?'
  back: 'Cast and call messages'
  tags: []
- front: 'For GenServe messages, what is the difference between the two messages Call and Cast?'
  back: 'Call messages expect a reply  while cast messages do now'
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
