---
- front: 'How do you register a process PID with a name?'
  back: 'Use Process.register(pid, :name_of_server)'
  tags: []
- front: 'What good is using a name for a server instead of its PID?'
  back: 'Instead of needing the PID, you can send to the server with that name'
  tags: []
- front: 'What is the downside of the using a name of the server vs the pid?'
  back: 'If you forgot that you have changed the name of the process, you might forget all the places the name is used'
  tags: []
- front: 'How do you get a the messages of a process?'
  back: 'Process.info(self(), :messages)'
  tags: []
- front: 'How does a process know to repeatedly call a function?'
  back: 'Schedule a refresh function to schedule another message to the server/process'
  tags: []
- front: 'What does Genserver init do?'
  back: 'Function that is invoked when the server is started. start_link/3 or start/3 will block until it returns. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop.'
  tags: []
- front: 'What is supervisor?'
  back: 'A supervisor is a process which supervises other processes, which we refer to as child processes.'
  tags: []
- front: 'What does the start_link method do?'
  back: 'Starts a supervisor with the given children. The children is a list of modules, two-element tuples with module and arguments or a map with the child specification.'
  tags: []
- front: 'What are your supervisors used to build?'
  back: 'A hierarchical process structure called a supervision tree.'
  tags: []
- front: 'What is the main advantage of using a supervision tree?'
  back: 'Supervision tress provide fault-tolerance and encapsulate how our applications start and shutdown.'
  tags: []
- front: 'What does the child spec function on the GenServer do?'
  back: 'Returns a child spec which is an elixir map specifying how the supervisor should start and supervise the child process.'
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
- front: ''
  back: ''
  tags: []
